{
  "address": "0x7A9e8eAdCD877101cfCC43e1917EF3a1caa05Ffd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "_ens",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_baseNode",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ControllerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ControllerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "NameMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "NameRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expires",
          "type": "uint256"
        }
      ],
      "name": "NameRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "GRACE_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "addController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "nameExpires",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "reclaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "registerOnly",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "removeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "renew",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe1ab2b4f06239fdb32f1d808caeada05f54d30181870e26b783f02f75998accf",
  "receipt": {
    "to": null,
    "from": "0x73964F6F211D5a8428322EDFbDfEc72FF76D9fCd",
    "contractAddress": "0x7A9e8eAdCD877101cfCC43e1917EF3a1caa05Ffd",
    "transactionIndex": 116,
    "gasUsed": "1349520",
    "logsBloom": "0x
    "blockHash": "0xdc0505a9fd59e1abf8c0eec8034e7f89d26d8657b509ad31385c065a7cd5923a",
    "transactionHash": "0xe1ab2b4f06239fdb32f1d808caeada05f54d30181870e26b783f02f75998accf",
    "logs": [
      {
        "transactionIndex": 116,
        "blockNumber": 8203601,
        "transactionHash": "0xe1ab2b4f06239fdb32f1d808caeada05f54d30181870e26b783f02f75998accf",
        "address": "0x7A9e8eAdCD877101cfCC43e1917EF3a1caa05Ffd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000073964f6f211d5a8428322edfbdfec72ff76d9fcd"
        ],
        "data": "0x",
        "logIndex": 222,
        "blockHash": "0xdc0505a9fd59e1abf8c0eec8034e7f89d26d8657b509ad31385c065a7cd5923a"
      }
    ],
    "blockNumber": 8203601,
    "cumulativeGasUsed": "18189647",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD7c8de815992B885c6d03a8df30bf06A09bAC94F",
    "0x51da8d4c89aa5dc26692b717721bad79e7daf431efba432139689a7ea4295d57"
  ],
  "solcInputHash": "cdfb794147f149bd4be1a5ab94086c87",
  "metadata": "{\"compiler\":{\"version\":\"0.7.4+commit.3f05b770\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"_ens\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_baseNode\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expires\",\"type\":\"uint256\"}],\"name\":\"NameRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"GRACE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"addController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"nameExpires\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"reclaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"registerOnly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"removeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"renew\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.\",\"params\":{\"to\":\"address to be approved for the given token ID\",\"tokenId\":\"uint256 ID of the token to be approved\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address\",\"params\":{\"owner\":\"address to query the balance of\"},\"returns\":{\"_0\":\"uint256 representing the amount owned by the passed address\"}},\"getApproved(uint256)\":{\"details\":\"Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the approval of\"},\"returns\":{\"_0\":\"address currently approved for the given token ID\"}},\"isApprovedForAll(address,address)\":{\"details\":\"Tells whether an operator is approved by a given owner\",\"params\":{\"operator\":\"operator address which you want to query the approval of\",\"owner\":\"owner address which you want to query the approval of\"},\"returns\":{\"_0\":\"bool whether the given operator is approved by the given owner\"}},\"isOwner()\":{\"returns\":{\"_0\":\"true if `msg.sender` is the owner of the contract.\"}},\"owner()\":{\"returns\":{\"_0\":\"the address of the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Gets the owner of the specified token ID. Names become ublock.timestampned      when their registration expires.\",\"params\":{\"tokenId\":\"uint256 ID of the token to query the owner of\"},\"returns\":{\"_0\":\"address currently marked as the owner of the given token ID\"}},\"reclaim(uint256,address)\":{\"details\":\"Reclaim ownership of a name in ENS, if you own it in the registrar.\"},\"register(uint256,address,uint256)\":{\"details\":\"Register a name.\",\"params\":{\"duration\":\"Duration in seconds for the registration.\",\"id\":\"The token ID (keccak256 of the label).\",\"owner\":\"The address that should own the registration.\"}},\"registerOnly(uint256,address,uint256)\":{\"details\":\"Register a name, without modifying the registry.\",\"params\":{\"duration\":\"Duration in seconds for the registration.\",\"id\":\"The token ID (keccak256 of the label).\",\"owner\":\"The address that should own the registration.\"}},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"_data\":\"bytes data to send along with a safe transfer check\",\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf\",\"params\":{\"approved\":\"representing the status of the approval to be set\",\"to\":\"operator address to set the approval\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator\",\"params\":{\"from\":\"current owner of the token\",\"to\":\"address to receive the ownership of the given token ID\",\"tokenId\":\"uint256 ID of the token to be transferred\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaseRegistrarImplementation.sol\":\"BaseRegistrarImplementation\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/BaseRegistrar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./standards/ERC721.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./ENS.sol\\\";\\n\\nabstract contract BaseRegistrar is ERC721, Ownable {\\n    uint constant public GRACE_PERIOD = 90 days;\\n\\n    event ControllerAdded(address indexed controller);\\n    event ControllerRemoved(address indexed controller);\\n    event NameMigrated(uint256 indexed id, address indexed owner, uint expires);\\n    event NameRegistered(uint256 indexed id, address indexed owner, uint expires);\\n    event NameRenewed(uint256 indexed id, uint expires);\\n\\n    // The ENS registry\\n    ENS public ens;\\n\\n    // The namehash of the TLD this registrar owns (eg, .eth)\\n    bytes32 public baseNode;\\n\\n    // A map of addresses that are authorised to register and renew names.\\n    mapping(address=>bool) public controllers;\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external virtual;\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external virtual;\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external virtual;\\n\\n    // Returns the expiration timestamp of the specified label hash.\\n    function nameExpires(uint256 id) external virtual view returns(uint);\\n\\n    // Returns true iff the specified name is available for registration.\\n    function available(uint256 id) public virtual view returns(bool);\\n\\n    /**\\n     * @dev Register a name.\\n     */\\n    function register(uint256 id, address owner, uint duration) external virtual returns(uint);\\n\\n    function renew(uint256 id, uint duration) external virtual returns(uint);\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external virtual;\\n}\",\"keccak256\":\"0xab7a70465904e101e9f520557e07ee78793d126a2d5a0d1b6aeffdbbcd38166a\",\"license\":\"MIT\"},\"contracts/BaseRegistrarImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./BaseRegistrar.sol\\\";\\nimport \\\"./standards/ERC721.sol\\\";\\n\\ncontract BaseRegistrarImplementation is BaseRegistrar {\\n    // A map of expiry times\\n    mapping(uint256=>uint) expiries;\\n\\n    bytes4 constant private INTERFACE_META_ID = bytes4(keccak256(\\\"supportsInterface(bytes4)\\\"));\\n    bytes4 constant private ERC721_ID = bytes4(\\n        keccak256(\\\"balanceOf(address)\\\") ^\\n        keccak256(\\\"ownerOf(uint256)\\\") ^\\n        keccak256(\\\"approve(address,uint256)\\\") ^\\n        keccak256(\\\"getApproved(uint256)\\\") ^\\n        keccak256(\\\"setApprovalForAll(address,bool)\\\") ^\\n        keccak256(\\\"isApprovedForAll(address,address)\\\") ^\\n        keccak256(\\\"transferFrom(address,address,uint256)\\\") ^\\n        keccak256(\\\"safeTransferFrom(address,address,uint256)\\\") ^\\n        keccak256(\\\"safeTransferFrom(address,address,uint256,bytes)\\\")\\n    );\\n    bytes4 constant private RECLAIM_ID = bytes4(keccak256(\\\"reclaim(uint256,address)\\\"));\\n\\n    constructor(ENS _ens, bytes32 _baseNode) {\\n        ens = _ens;\\n        baseNode = _baseNode;\\n    }\\n\\n    modifier live {\\n        require(ens.owner(baseNode) == address(this));\\n        _;\\n    }\\n\\n    modifier onlyController {\\n        require(controllers[msg.sender]);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Gets the owner of the specified token ID. Names become ublock.timestampned\\n     *      when their registration expires.\\n     * @param tokenId uint256 ID of the token to query the owner of\\n     * @return address currently marked as the owner of the given token ID\\n     */\\n    function ownerOf(uint256 tokenId) public override view returns (address) {\\n        require(expiries[tokenId] > block.timestamp);\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    // Authorises a controller, who can register and renew domains.\\n    function addController(address controller) external override onlyOwner {\\n        controllers[controller] = true;\\n        emit ControllerAdded(controller);\\n    }\\n\\n    // Revoke controller permission for an address.\\n    function removeController(address controller) external override onlyOwner {\\n        controllers[controller] = false;\\n        emit ControllerRemoved(controller);\\n    }\\n\\n    // Set the resolver for the TLD this registrar manages.\\n    function setResolver(address resolver) external override onlyOwner {\\n        ens.setResolver(baseNode, resolver);\\n    }\\n\\n    // Returns the expiration timestamp of the specified id.\\n    function nameExpires(uint256 id) external override view returns(uint) {\\n        return expiries[id];\\n    }\\n\\n    // Returns true iff the specified name is available for registration.\\n    function available(uint256 id) public override view returns(bool) {\\n        // Not available if it's registered here or in its grace period.\\n        return expiries[id] + GRACE_PERIOD < block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Register a name.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param owner The address that should own the registration.\\n     * @param duration Duration in seconds for the registration.\\n     */\\n    function register(uint256 id, address owner, uint duration) external override returns(uint) {\\n      return _register(id, owner, duration, true);\\n    }\\n\\n    /**\\n     * @dev Register a name, without modifying the registry.\\n     * @param id The token ID (keccak256 of the label).\\n     * @param owner The address that should own the registration.\\n     * @param duration Duration in seconds for the registration.\\n     */\\n    function registerOnly(uint256 id, address owner, uint duration) external returns(uint) {\\n      return _register(id, owner, duration, false);\\n    }\\n\\n    function _register(uint256 id, address owner, uint duration, bool updateRegistry) internal live onlyController returns(uint) {\\n        require(available(id));\\n        require(block.timestamp + duration + GRACE_PERIOD > block.timestamp + GRACE_PERIOD); // Prevent future overflow\\n\\n        expiries[id] = block.timestamp + duration;\\n        if(_exists(id)) {\\n            // Name was previously owned, and expired\\n            _burn(id);\\n        }\\n        _mint(owner, id);\\n        if(updateRegistry) {\\n            ens.setSubnodeOwner(baseNode, bytes32(id), owner);\\n        }\\n\\n        emit NameRegistered(id, owner, block.timestamp + duration);\\n\\n        return block.timestamp + duration;\\n    }\\n\\n    function renew(uint256 id, uint duration) external override live onlyController returns(uint) {\\n        require(expiries[id] + GRACE_PERIOD >= block.timestamp); // Name must be registered here or in grace period\\n        require(expiries[id] + duration + GRACE_PERIOD > duration + GRACE_PERIOD); // Prevent future overflow\\n\\n        expiries[id] += duration;\\n        emit NameRenewed(id, expiries[id]);\\n        return expiries[id];\\n    }\\n\\n    /**\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\n     */\\n    function reclaim(uint256 id, address owner) external override live {\\n        require(_isApprovedOrOwner(msg.sender, id));\\n        ens.setSubnodeOwner(baseNode, bytes32(id), owner);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public override view returns (bool) {\\n        return interfaceID == INTERFACE_META_ID ||\\n               interfaceID == ERC721_ID ||\\n               interfaceID == RECLAIM_ID;\\n    }\\n}\",\"keccak256\":\"0xf326356a78848b030ace22c573e7409fd872b7d49c93cbc18dd81933e573bfd5\",\"license\":\"MIT\"},\"contracts/ENS.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\ninterface ENS {\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function setRecord(bytes32 node, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeRecord(bytes32 node, bytes32 label, address owner, address resolver, uint64 ttl) external virtual;\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external virtual returns(bytes32);\\n    function setResolver(bytes32 node, address resolver) external virtual;\\n    function setOwner(bytes32 node, address owner) external virtual;\\n    function setTTL(bytes32 node, uint64 ttl) external virtual;\\n    function setApprovalForAll(address operator, bool approved) external virtual;\\n    function owner(bytes32 node) external virtual view returns (address);\\n    function resolver(bytes32 node) external virtual view returns (address);\\n    function ttl(bytes32 node) external virtual view returns (uint64);\\n    function recordExists(bytes32 node) external virtual view returns (bool);\\n    function isApprovedForAll(address owner, address operator) external virtual view returns (bool);\\n}\",\"keccak256\":\"0x2ace8595eb6f12d75971575bbdbf11a3adc680f36b5ba9bbbec66e5745394b74\"},\"contracts/interfaces/IERC165.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\n/**\\n * @title IERC165\\n * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice Query if a contract implements an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @dev Interface identification is specified in ERC-165. This function\\n     * uses less than 30,000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0x7b21c6b6b30b2b479e8dd062e1fc5b158f83249277ebecc75e3906ce4eb9a34f\"},\"contracts/interfaces/IERC721.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic interface\\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ninterface IERC721 {\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    function approve(address to, uint256 tokenId) external;\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    function setApprovalForAll(address operator, bool _approved) external;\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) external;\\n}\",\"keccak256\":\"0xf3ec40ebf5a66297adddccad2c949b09642e702f9a639a0528ee16bdc732dc3f\"},\"contracts/interfaces/IERC721Receiver.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @notice Handle the receipt of an NFT\\n     * @dev The ERC721 smart contract calls this function on the recipient\\n     * after a `safeTransfer`. This function MUST return the function selector,\\n     * otherwise the caller will revert the transaction. The selector to be\\n     * returned can be obtained as `this.onERC721Received.selector`. This\\n     * function MAY throw to revert and reject the transfer.\\n     * Note: the ERC721 contract address is always the message sender.\\n     * @param operator The address which called `safeTransferFrom` function\\n     * @param from The address which previously owned the token\\n     * @param tokenId The NFT identifier which is being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)\\n    external returns (bytes4);\\n}\",\"keccak256\":\"0x1795f341e4bef5c58475deb692a02662d807b79cc8e9496e927b7c3116b6863c\"},\"contracts/libraries/Address.sol\":{\"content\":\"// File: openzeppelin-solidity/contracts/utils/Address.sol\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * Utility library of inline functions on addresses\\n */\\nlibrary Address {\\n    /**\\n     * Returns whether the target address is a contract\\n     * @dev This function will return false if invoked during the constructor of a contract,\\n     * as the code is not actually created until after the constructor finishes.\\n     * @param account address of the account to check\\n     * @return whether the target address is a contract\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        // XXX Currently there is no better way to check if there is a contract in an address\\n        // than to check the size of the code at that address.\\n        // See https://ethereum.stackexchange.com/a/14016/36603\\n        // for more details about how this works.\\n        // TODO Check this again before the Serenity release, because all addresses will be\\n        // contracts then.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n}\",\"keccak256\":\"0xd63368977fa2f709f004cf97b7d37092e36fb556c35309c16aa59dacebc9beb4\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\n/**\\n * @title Ownable\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n */\\ncontract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n     * account.\\n     */\\n    constructor() {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /**\\n     * @return the address of the owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(isOwner());\\n        _;\\n    }\\n\\n    /**\\n     * @return true if `msg.sender` is the owner of the contract.\\n     */\\n    function isOwner() public view returns (bool) {\\n        return msg.sender == _owner;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to relinquish control of the contract.\\n     * @notice Renouncing to ownership will leave the contract without an owner.\\n     * It will not be possible to call the functions with the `onlyOwner`\\n     * modifier anymore.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0));\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0x72100b8090a9177a4fe6c7a1286896090f4caf8ada9fa6b3cd3ef7d2e1746ed9\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SafeMath\\n * @dev Unsigned math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    /**\\n    * @dev Multiplies two unsigned integers, reverts on overflow.\\n    */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two unsigned integers, reverts on overflow.\\n    */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x79bafac35d534c98e2ff28b273cdfb4e86d56abaeec49caba4a64d59c61552e0\"},\"contracts/standards/ERC165.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IERC165.sol\\\";\\n\\ncontract ERC165 is IERC165 {\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n    /**\\n     * 0x01ffc9a7 ===\\n     *     bytes4(keccak256('supportsInterface(bytes4)'))\\n     */\\n\\n    /**\\n     * @dev a mapping of interface id to whether or not it's supported\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev A contract implementing SupportsInterfaceWithLookup\\n     * implement ERC165 itself\\n     */\\n    constructor() {\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev implement supportsInterface(bytes4) using a lookup table\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev internal method for registering an interface\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal {\\n        require(interfaceId != 0xffffffff);\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\",\"keccak256\":\"0xb360cd28cb966304f6a00bcf54482fe099da5d7386d560eda09e5e3d7232089c\"},\"contracts/standards/ERC721.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"../standards/ERC165.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"..//libraries/Address.sol\\\";\\nimport \\\"../interfaces/IERC721Receiver.sol\\\";\\nimport \\\"../interfaces/IERC721.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\\n */\\ncontract ERC721 is IERC721, ERC165 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from token ID to owner\\n    mapping (uint256 => address) private _tokenOwner;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to number of owned token\\n    mapping (address => uint256) private _ownedTokensCount;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n    /*\\n     * 0x80ac58cd ===\\n     *     bytes4(keccak256('balanceOf(address)')) ^\\n     *     bytes4(keccak256('ownerOf(uint256)')) ^\\n     *     bytes4(keccak256('approve(address,uint256)')) ^\\n     *     bytes4(keccak256('getApproved(uint256)')) ^\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) ^\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) ^\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) ^\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\\n     */\\n\\n    constructor() {\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n    }\\n\\n    /**\\n     * @dev Gets the balance of the specified address\\n     * @param owner address to query the balance of\\n     * @return uint256 representing the amount owned by the passed address\\n     */\\n    function balanceOf(address owner) public view override returns (uint256) {\\n        require(owner != address(0));\\n        return _ownedTokensCount[owner];\\n    }\\n\\n    /**\\n     * @dev Gets the owner of the specified token ID\\n     * @param tokenId uint256 ID of the token to query the owner of\\n     * @return owner address currently marked as the owner of the given token ID\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _tokenOwner[tokenId];\\n        require(owner != address(0));\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Approves another address to transfer the given token ID\\n     * The zero address indicates there is no approved address.\\n     * There can only be one approved address per token at a given time.\\n     * Can only be called by the token owner or an approved operator.\\n     * @param to address to be approved for the given token ID\\n     * @param tokenId uint256 ID of the token to be approved\\n     */\\n    function approve(address to, uint256 tokenId) public override {\\n        address owner = ownerOf(tokenId);\\n        require(to != owner);\\n        require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\\n\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(owner, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Gets the approved address for a token ID, or zero if no address set\\n     * Reverts if the token ID does not exist.\\n     * @param tokenId uint256 ID of the token to query the approval of\\n     * @return address currently approved for the given token ID\\n     */\\n    function getApproved(uint256 tokenId) public override view returns (address) {\\n        require(_exists(tokenId));\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Sets or unsets the approval of a given operator\\n     * An operator is allowed to transfer all tokens of the sender on their behalf\\n     * @param to operator address to set the approval\\n     * @param approved representing the status of the approval to be set\\n     */\\n    function setApprovalForAll(address to, bool approved) public override {\\n        require(to != msg.sender);\\n        _operatorApprovals[msg.sender][to] = approved;\\n        emit ApprovalForAll(msg.sender, to, approved);\\n    }\\n\\n    /**\\n     * @dev Tells whether an operator is approved by a given owner\\n     * @param owner owner address which you want to query the approval of\\n     * @param operator operator address which you want to query the approval of\\n     * @return bool whether the given operator is approved by the given owner\\n     */\\n    function isApprovedForAll(address owner, address operator) public override view returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev Transfers the ownership of a given token ID to another address\\n     * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\\n     * Requires the msg sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n    */\\n    function transferFrom(address from, address to, uint256 tokenId) public override {\\n        require(_isApprovedOrOwner(msg.sender, tokenId));\\n\\n        _transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     *\\n     * Requires the msg sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n    */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Safely transfers the ownership of a given token ID to another address\\n     * If the target address is a contract, it must implement `onERC721Received`,\\n     * which is called upon a safe transfer, and return the magic value\\n     * `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`; otherwise,\\n     * the transfer is reverted.\\n     * Requires the msg sender to be the owner, approved, or operator\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes data to send along with a safe transfer check\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public override {\\n        transferFrom(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data));\\n    }\\n\\n    /**\\n     * @dev Returns whether the specified token exists\\n     * @param tokenId uint256 ID of the token to query the existence of\\n     * @return whether the token exists\\n     */\\n    function _exists(uint256 tokenId) internal view returns (bool) {\\n        address owner = _tokenOwner[tokenId];\\n        return owner != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether the given spender can transfer a given token ID\\n     * @param spender address of the spender to query\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @return bool whether the msg.sender is approved for the given token ID,\\n     *    is an operator of the owner, or is the owner of the token\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\\n        address owner = ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Internal function to mint a new token\\n     * Reverts if the given token ID already exists\\n     * @param to The address that will own the minted token\\n     * @param tokenId uint256 ID of the token to be minted\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        require(to != address(0));\\n        require(!_exists(tokenId));\\n\\n        _tokenOwner[tokenId] = to;\\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token\\n     * Reverts if the token does not exist\\n     * Deprecated, use _burn(uint256) instead.\\n     * @param owner owner of the token to burn\\n     * @param tokenId uint256 ID of the token being burned\\n     */\\n    function _burn(address owner, uint256 tokenId) internal {\\n        require(ownerOf(tokenId) == owner);\\n\\n        _clearApproval(tokenId);\\n\\n        _ownedTokensCount[owner] = _ownedTokensCount[owner].sub(1);\\n        _tokenOwner[tokenId] = address(0);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to burn a specific token\\n     * Reverts if the token does not exist\\n     * @param tokenId uint256 ID of the token being burned\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        _burn(ownerOf(tokenId), tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to transfer ownership of a given token ID to another address.\\n     * As opposed to transferFrom, this imposes no restrictions on msg.sender.\\n     * @param from current owner of the token\\n     * @param to address to receive the ownership of the given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n    */\\n    function _transferFrom(address from, address to, uint256 tokenId) internal {\\n        require(ownerOf(tokenId) == from);\\n        require(to != address(0));\\n\\n        _clearApproval(tokenId);\\n\\n        _ownedTokensCount[from] = _ownedTokensCount[from].sub(1);\\n        _ownedTokensCount[to] = _ownedTokensCount[to].add(1);\\n\\n        _tokenOwner[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke `onERC721Received` on a target address\\n     * The call is not executed if the target address is not a contract\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        internal returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n\\n        bytes4 retval = IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Private function to clear current approval of a given token ID\\n     * @param tokenId uint256 ID of the token to be transferred\\n     */\\n    function _clearApproval(uint256 tokenId) private {\\n        if (_tokenApprovals[tokenId] != address(0)) {\\n            _tokenApprovals[tokenId] = address(0);\\n        }\\n    }\\n}\",\"keccak256\":\"0x6126c9a14460f6bd2504c024075c56125d863de39b8f7c34a600c6f3358f0c68\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516116783803806116788339818101604052604081101561003357600080fd5b50805160209091015161004c6301ffc9a760e01b6100d1565b61005c6380ac58cd60e01b6100d1565b600580546001600160a01b0319163317908190556040516001600160a01b0391909116906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600680546001600160a01b0319166001600160a01b03939093169290921790915560075561010d565b6001600160e01b031980821614156100e857600080fd5b6001600160e01b0319166000908152602081905260409020805460ff19166001179055565b61155c8061011c6000396000f3fe608060405234801561001057600080fd5b50600436106101b95760003560e01c80638f32d59b116100f9578063d6e4fa8611610097578063e985e9c511610071578063e985e9c514610572578063f2fde38b146105a0578063f6a74ed7146105c6578063fca247ac146105ec576101b9565b8063d6e4fa8614610527578063da8c229e14610544578063ddf7fcb01461056a576101b9565b8063a7fc7a07116100d3578063a7fc7a0714610410578063b88d4fde14610436578063c1a287e2146104fc578063c475abff14610504576101b9565b80638f32d59b146103bd57806396e494e8146103c5578063a22cb465146103e2576101b9565b80633f15457f116101665780636352211e116101405780636352211e1461036a57806370a0823114610387578063715018a6146103ad5780638da5cb5b146103b5576101b9565b80633f15457f1461030657806342842e0e1461030e5780634e543b2614610344576101b9565b80630e297b45116101975780630e297b451461026057806323b872dd146102a457806328ed4f6c146102da576101b9565b806301ffc9a7146101be578063081812fc146101f9578063095ea7b314610232575b600080fd5b6101e5600480360360208110156101d457600080fd5b50356001600160e01b03191661061e565b604080519115158252519081900360200190f35b6102166004803603602081101561020f57600080fd5b50356106bb565b604080516001600160a01b039092168252519081900360200190f35b61025e6004803603604081101561024857600080fd5b506001600160a01b0381351690602001356106eb565b005b6102926004803603606081101561027657600080fd5b508035906001600160a01b036020820135169060400135610798565b60408051918252519081900360200190f35b61025e600480360360608110156102ba57600080fd5b506001600160a01b038135811691602081013590911690604001356107af565b61025e600480360360408110156102f057600080fd5b50803590602001356001600160a01b03166107d2565b610216610902565b61025e6004803603606081101561032457600080fd5b506001600160a01b03813581169160208101359091169060400135610911565b61025e6004803603602081101561035a57600080fd5b50356001600160a01b031661092c565b6102166004803603602081101561038057600080fd5b50356109c9565b6102926004803603602081101561039d57600080fd5b50356001600160a01b03166109ec565b61025e610a1d565b610216610a78565b6101e5610a87565b6101e5600480360360208110156103db57600080fd5b5035610a98565b61025e600480360360408110156103f857600080fd5b506001600160a01b0381351690602001351515610ab3565b61025e6004803603602081101561042657600080fd5b50356001600160a01b0316610b37565b61025e6004803603608081101561044c57600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561048757600080fd5b82018360208201111561049957600080fd5b803590602001918460018302840111640100000000831117156104bb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b94945050505050565b610292610bb4565b6102926004803603604081101561051a57600080fd5b5080359060200135610bbb565b6102926004803603602081101561053d57600080fd5b5035610d10565b6101e56004803603602081101561055a57600080fd5b50356001600160a01b0316610d22565b610292610d37565b6101e56004803603604081101561058857600080fd5b506001600160a01b0381358116916020013516610d3d565b61025e600480360360208110156105b657600080fd5b50356001600160a01b0316610d6b565b61025e600480360360208110156105dc57600080fd5b50356001600160a01b0316610d88565b6102926004803603606081101561060257600080fd5b508035906001600160a01b036020820135169060400135610de2565b60006001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000148061068157506001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000145b806106b557506001600160e01b031982167f28ed4f6c00000000000000000000000000000000000000000000000000000000145b92915050565b60006106c682610df1565b6106cf57600080fd5b506000908152600260205260409020546001600160a01b031690565b60006106f6826109c9565b9050806001600160a01b0316836001600160a01b0316141561071757600080fd5b336001600160a01b038216148061073357506107338133610d3d565b61073c57600080fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006107a78484846000610e0e565b949350505050565b6107b93382610ffa565b6107c257600080fd5b6107cd838383611051565b505050565b600654600754604080516302571be360e01b815260048101929092525130926001600160a01b0316916302571be3916024808301926020929190829003018186803b15801561082057600080fd5b505afa158015610834573d6000803e3d6000fd5b505050506040513d602081101561084a57600080fd5b50516001600160a01b03161461085f57600080fd5b6108693383610ffa565b61087257600080fd5b600654600754604080516306ab592360e01b81526004810192909252602482018590526001600160a01b03848116604484015290519216916306ab5923916064808201926020929091908290030181600087803b1580156108d257600080fd5b505af11580156108e6573d6000803e3d6000fd5b505050506040513d60208110156108fc57600080fd5b50505050565b6006546001600160a01b031681565b6107cd83838360405180602001604052806000815250610b94565b610934610a87565b61093d57600080fd5b600654600754604080517f1896f70a00000000000000000000000000000000000000000000000000000000815260048101929092526001600160a01b0384811660248401529051921691631896f70a9160448082019260009290919082900301818387803b1580156109ae57600080fd5b505af11580156109c2573d6000803e3d6000fd5b5050505050565b60008181526009602052604081205442106109e357600080fd5b6106b582611152565b60006001600160a01b038216610a0157600080fd5b506001600160a01b031660009081526003602052604090205490565b610a25610a87565b610a2e57600080fd5b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b031690565b6005546001600160a01b0316331490565b600090815260096020526040902054426276a7009091011090565b6001600160a01b038216331415610ac957600080fd5b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610b3f610a87565b610b4857600080fd5b6001600160a01b038116600081815260086020526040808220805460ff19166001179055517f0a8bb31534c0ed46f380cb867bd5c803a189ced9a764e30b3a4991a9901d74749190a250565b610b9f8484846107af565b610bab84848484611174565b6108fc57600080fd5b6276a70081565b600654600754604080516302571be360e01b815260048101929092525160009230926001600160a01b03909116916302571be391602480820192602092909190829003018186803b158015610c0f57600080fd5b505afa158015610c23573d6000803e3d6000fd5b505050506040513d6020811015610c3957600080fd5b50516001600160a01b031614610c4e57600080fd5b3360009081526008602052604090205460ff16610c6a57600080fd5b600083815260096020526040902054426276a7009091011015610c8c57600080fd5b6000838152600960205260409020546276a7008381019184010111610cb057600080fd5b60008381526009602090815260409182902080548501908190558251908152915185927f9b87a00e30f1ac65d898f070f8a3488fe60517182d0a2098e1b4b93a54aa9bd692908290030190a2505060009081526009602052604090205490565b60009081526009602052604090205490565b60086020526000908152604090205460ff1681565b60075481565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b610d73610a87565b610d7c57600080fd5b610d85816112cb565b50565b610d90610a87565b610d9957600080fd5b6001600160a01b038116600081815260086020526040808220805460ff19169055517f33d83959be2573f5453b12eb9d43b3499bc57d96bd2f067ba44803c859e811139190a250565b60006107a78484846001610e0e565b6000908152600160205260409020546001600160a01b0316151590565b600654600754604080516302571be360e01b815260048101929092525160009230926001600160a01b03909116916302571be391602480820192602092909190829003018186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d6020811015610e8c57600080fd5b50516001600160a01b031614610ea157600080fd5b3360009081526008602052604090205460ff16610ebd57600080fd5b610ec685610a98565b610ecf57600080fd5b6276a70042016276a7008442010111610ee757600080fd5b60008581526009602052604090204284019055610f0385610df1565b15610f1157610f118561133a565b610f1b848661134c565b8115610fae57600654600754604080516306ab592360e01b81526004810192909252602482018890526001600160a01b03878116604484015290519216916306ab5923916064808201926020929091908290030181600087803b158015610f8157600080fd5b505af1158015610f95573d6000803e3d6000fd5b505050506040513d6020811015610fab57600080fd5b50505b60408051428501815290516001600160a01b0386169187917fb3d987963d01b2f68493b4bdb130988f157ea43070d4ad840fee0466ed9370d99181900360200190a35050420192915050565b600080611006836109c9565b9050806001600160a01b0316846001600160a01b031614806110415750836001600160a01b0316611036846106bb565b6001600160a01b0316145b806107a757506107a78185610d3d565b826001600160a01b0316611064826109c9565b6001600160a01b03161461107757600080fd5b6001600160a01b03821661108a57600080fd5b611093816113fe565b6001600160a01b0383166000908152600360205260409020546110b7906001611439565b6001600160a01b0380851660009081526003602052604080822093909355908416815220546110e790600161144e565b6001600160a01b038084166000818152600360209081526040808320959095558582526001905283812080546001600160a01b031916831790559251849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000818152600160205260408120546001600160a01b0316806106b557600080fd5b6000611188846001600160a01b0316611467565b611194575060016107a7565b6000846001600160a01b031663150b7a02338887876040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611219578181015183820152602001611201565b50505050905090810190601f1680156112465780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561126857600080fd5b505af115801561127c573d6000803e3d6000fd5b505050506040513d602081101561129257600080fd5b50516001600160e01b0319167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b6001600160a01b0381166112de57600080fd5b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b610d85611346826109c9565b8261146d565b6001600160a01b03821661135f57600080fd5b61136881610df1565b1561137257600080fd5b600081815260016020818152604080842080546001600160a01b0319166001600160a01b03881690811790915584526003909152909120546113b39161144e565b6001600160a01b0383166000818152600360205260408082209390935591518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000818152600260205260409020546001600160a01b031615610d8557600090815260026020526040902080546001600160a01b0319169055565b60008282111561144857600080fd5b50900390565b60008282018381101561146057600080fd5b9392505050565b3b151590565b816001600160a01b0316611480826109c9565b6001600160a01b03161461149357600080fd5b61149c816113fe565b6001600160a01b0382166000908152600360205260409020546114c0906001611439565b6001600160a01b0383166000818152600360209081526040808320949094558482526001905282812080546001600160a01b03191690559151839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505056fea264697066735822122055a7fad32cd153b3e9486cd78bab8d505ad3ad0b4511c6406cf3eff55f528dbd64736f6c63430007040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b95760003560e01c80638f32d59b116100f9578063d6e4fa8611610097578063e985e9c511610071578063e985e9c514610572578063f2fde38b146105a0578063f6a74ed7146105c6578063fca247ac146105ec576101b9565b8063d6e4fa8614610527578063da8c229e14610544578063ddf7fcb01461056a576101b9565b8063a7fc7a07116100d3578063a7fc7a0714610410578063b88d4fde14610436578063c1a287e2146104fc578063c475abff14610504576101b9565b80638f32d59b146103bd57806396e494e8146103c5578063a22cb465146103e2576101b9565b80633f15457f116101665780636352211e116101405780636352211e1461036a57806370a0823114610387578063715018a6146103ad5780638da5cb5b146103b5576101b9565b80633f15457f1461030657806342842e0e1461030e5780634e543b2614610344576101b9565b80630e297b45116101975780630e297b451461026057806323b872dd146102a457806328ed4f6c146102da576101b9565b806301ffc9a7146101be578063081812fc146101f9578063095ea7b314610232575b600080fd5b6101e5600480360360208110156101d457600080fd5b50356001600160e01b03191661061e565b604080519115158252519081900360200190f35b6102166004803603602081101561020f57600080fd5b50356106bb565b604080516001600160a01b039092168252519081900360200190f35b61025e6004803603604081101561024857600080fd5b506001600160a01b0381351690602001356106eb565b005b6102926004803603606081101561027657600080fd5b508035906001600160a01b036020820135169060400135610798565b60408051918252519081900360200190f35b61025e600480360360608110156102ba57600080fd5b506001600160a01b038135811691602081013590911690604001356107af565b61025e600480360360408110156102f057600080fd5b50803590602001356001600160a01b03166107d2565b610216610902565b61025e6004803603606081101561032457600080fd5b506001600160a01b03813581169160208101359091169060400135610911565b61025e6004803603602081101561035a57600080fd5b50356001600160a01b031661092c565b6102166004803603602081101561038057600080fd5b50356109c9565b6102926004803603602081101561039d57600080fd5b50356001600160a01b03166109ec565b61025e610a1d565b610216610a78565b6101e5610a87565b6101e5600480360360208110156103db57600080fd5b5035610a98565b61025e600480360360408110156103f857600080fd5b506001600160a01b0381351690602001351515610ab3565b61025e6004803603602081101561042657600080fd5b50356001600160a01b0316610b37565b61025e6004803603608081101561044c57600080fd5b6001600160a01b0382358116926020810135909116916040820135919081019060808101606082013564010000000081111561048757600080fd5b82018360208201111561049957600080fd5b803590602001918460018302840111640100000000831117156104bb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610b94945050505050565b610292610bb4565b6102926004803603604081101561051a57600080fd5b5080359060200135610bbb565b6102926004803603602081101561053d57600080fd5b5035610d10565b6101e56004803603602081101561055a57600080fd5b50356001600160a01b0316610d22565b610292610d37565b6101e56004803603604081101561058857600080fd5b506001600160a01b0381358116916020013516610d3d565b61025e600480360360208110156105b657600080fd5b50356001600160a01b0316610d6b565b61025e600480360360208110156105dc57600080fd5b50356001600160a01b0316610d88565b6102926004803603606081101561060257600080fd5b508035906001600160a01b036020820135169060400135610de2565b60006001600160e01b031982167f01ffc9a700000000000000000000000000000000000000000000000000000000148061068157506001600160e01b031982167f80ac58cd00000000000000000000000000000000000000000000000000000000145b806106b557506001600160e01b031982167f28ed4f6c00000000000000000000000000000000000000000000000000000000145b92915050565b60006106c682610df1565b6106cf57600080fd5b506000908152600260205260409020546001600160a01b031690565b60006106f6826109c9565b9050806001600160a01b0316836001600160a01b0316141561071757600080fd5b336001600160a01b038216148061073357506107338133610d3d565b61073c57600080fd5b60008281526002602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b60006107a78484846000610e0e565b949350505050565b6107b93382610ffa565b6107c257600080fd5b6107cd838383611051565b505050565b600654600754604080516302571be360e01b815260048101929092525130926001600160a01b0316916302571be3916024808301926020929190829003018186803b15801561082057600080fd5b505afa158015610834573d6000803e3d6000fd5b505050506040513d602081101561084a57600080fd5b50516001600160a01b03161461085f57600080fd5b6108693383610ffa565b61087257600080fd5b600654600754604080516306ab592360e01b81526004810192909252602482018590526001600160a01b03848116604484015290519216916306ab5923916064808201926020929091908290030181600087803b1580156108d257600080fd5b505af11580156108e6573d6000803e3d6000fd5b505050506040513d60208110156108fc57600080fd5b50505050565b6006546001600160a01b031681565b6107cd83838360405180602001604052806000815250610b94565b610934610a87565b61093d57600080fd5b600654600754604080517f1896f70a00000000000000000000000000000000000000000000000000000000815260048101929092526001600160a01b0384811660248401529051921691631896f70a9160448082019260009290919082900301818387803b1580156109ae57600080fd5b505af11580156109c2573d6000803e3d6000fd5b5050505050565b60008181526009602052604081205442106109e357600080fd5b6106b582611152565b60006001600160a01b038216610a0157600080fd5b506001600160a01b031660009081526003602052604090205490565b610a25610a87565b610a2e57600080fd5b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b031690565b6005546001600160a01b0316331490565b600090815260096020526040902054426276a7009091011090565b6001600160a01b038216331415610ac957600080fd5b3360008181526004602090815260408083206001600160a01b03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b610b3f610a87565b610b4857600080fd5b6001600160a01b038116600081815260086020526040808220805460ff19166001179055517f0a8bb31534c0ed46f380cb867bd5c803a189ced9a764e30b3a4991a9901d74749190a250565b610b9f8484846107af565b610bab84848484611174565b6108fc57600080fd5b6276a70081565b600654600754604080516302571be360e01b815260048101929092525160009230926001600160a01b03909116916302571be391602480820192602092909190829003018186803b158015610c0f57600080fd5b505afa158015610c23573d6000803e3d6000fd5b505050506040513d6020811015610c3957600080fd5b50516001600160a01b031614610c4e57600080fd5b3360009081526008602052604090205460ff16610c6a57600080fd5b600083815260096020526040902054426276a7009091011015610c8c57600080fd5b6000838152600960205260409020546276a7008381019184010111610cb057600080fd5b60008381526009602090815260409182902080548501908190558251908152915185927f9b87a00e30f1ac65d898f070f8a3488fe60517182d0a2098e1b4b93a54aa9bd692908290030190a2505060009081526009602052604090205490565b60009081526009602052604090205490565b60086020526000908152604090205460ff1681565b60075481565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205460ff1690565b610d73610a87565b610d7c57600080fd5b610d85816112cb565b50565b610d90610a87565b610d9957600080fd5b6001600160a01b038116600081815260086020526040808220805460ff19169055517f33d83959be2573f5453b12eb9d43b3499bc57d96bd2f067ba44803c859e811139190a250565b60006107a78484846001610e0e565b6000908152600160205260409020546001600160a01b0316151590565b600654600754604080516302571be360e01b815260048101929092525160009230926001600160a01b03909116916302571be391602480820192602092909190829003018186803b158015610e6257600080fd5b505afa158015610e76573d6000803e3d6000fd5b505050506040513d6020811015610e8c57600080fd5b50516001600160a01b031614610ea157600080fd5b3360009081526008602052604090205460ff16610ebd57600080fd5b610ec685610a98565b610ecf57600080fd5b6276a70042016276a7008442010111610ee757600080fd5b60008581526009602052604090204284019055610f0385610df1565b15610f1157610f118561133a565b610f1b848661134c565b8115610fae57600654600754604080516306ab592360e01b81526004810192909252602482018890526001600160a01b03878116604484015290519216916306ab5923916064808201926020929091908290030181600087803b158015610f8157600080fd5b505af1158015610f95573d6000803e3d6000fd5b505050506040513d6020811015610fab57600080fd5b50505b60408051428501815290516001600160a01b0386169187917fb3d987963d01b2f68493b4bdb130988f157ea43070d4ad840fee0466ed9370d99181900360200190a35050420192915050565b600080611006836109c9565b9050806001600160a01b0316846001600160a01b031614806110415750836001600160a01b0316611036846106bb565b6001600160a01b0316145b806107a757506107a78185610d3d565b826001600160a01b0316611064826109c9565b6001600160a01b03161461107757600080fd5b6001600160a01b03821661108a57600080fd5b611093816113fe565b6001600160a01b0383166000908152600360205260409020546110b7906001611439565b6001600160a01b0380851660009081526003602052604080822093909355908416815220546110e790600161144e565b6001600160a01b038084166000818152600360209081526040808320959095558582526001905283812080546001600160a01b031916831790559251849391928716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000818152600160205260408120546001600160a01b0316806106b557600080fd5b6000611188846001600160a01b0316611467565b611194575060016107a7565b6000846001600160a01b031663150b7a02338887876040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611219578181015183820152602001611201565b50505050905090810190601f1680156112465780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561126857600080fd5b505af115801561127c573d6000803e3d6000fd5b505050506040513d602081101561129257600080fd5b50516001600160e01b0319167f150b7a020000000000000000000000000000000000000000000000000000000014915050949350505050565b6001600160a01b0381166112de57600080fd5b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b610d85611346826109c9565b8261146d565b6001600160a01b03821661135f57600080fd5b61136881610df1565b1561137257600080fd5b600081815260016020818152604080842080546001600160a01b0319166001600160a01b03881690811790915584526003909152909120546113b39161144e565b6001600160a01b0383166000818152600360205260408082209390935591518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000818152600260205260409020546001600160a01b031615610d8557600090815260026020526040902080546001600160a01b0319169055565b60008282111561144857600080fd5b50900390565b60008282018381101561146057600080fd5b9392505050565b3b151590565b816001600160a01b0316611480826109c9565b6001600160a01b03161461149357600080fd5b61149c816113fe565b6001600160a01b0382166000908152600360205260409020546114c0906001611439565b6001600160a01b0383166000818152600360209081526040808320949094558482526001905282812080546001600160a01b03191690559151839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505056fea264697066735822122055a7fad32cd153b3e9486cd78bab8d505ad3ad0b4511c6406cf3eff55f528dbd64736f6c63430007040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.",
        "params": {
          "to": "address to be approved for the given token ID",
          "tokenId": "uint256 ID of the token to be approved"
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address",
        "params": {
          "owner": "address to query the balance of"
        },
        "returns": {
          "_0": "uint256 representing the amount owned by the passed address"
        }
      },
      "getApproved(uint256)": {
        "details": "Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.",
        "params": {
          "tokenId": "uint256 ID of the token to query the approval of"
        },
        "returns": {
          "_0": "address currently approved for the given token ID"
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "Tells whether an operator is approved by a given owner",
        "params": {
          "operator": "operator address which you want to query the approval of",
          "owner": "owner address which you want to query the approval of"
        },
        "returns": {
          "_0": "bool whether the given operator is approved by the given owner"
        }
      },
      "isOwner()": {
        "returns": {
          "_0": "true if `msg.sender` is the owner of the contract."
        }
      },
      "owner()": {
        "returns": {
          "_0": "the address of the owner."
        }
      },
      "ownerOf(uint256)": {
        "details": "Gets the owner of the specified token ID. Names become ublock.timestampned      when their registration expires.",
        "params": {
          "tokenId": "uint256 ID of the token to query the owner of"
        },
        "returns": {
          "_0": "address currently marked as the owner of the given token ID"
        }
      },
      "reclaim(uint256,address)": {
        "details": "Reclaim ownership of a name in ENS, if you own it in the registrar."
      },
      "register(uint256,address,uint256)": {
        "details": "Register a name.",
        "params": {
          "duration": "Duration in seconds for the registration.",
          "id": "The token ID (keccak256 of the label).",
          "owner": "The address that should own the registration."
        }
      },
      "registerOnly(uint256,address,uint256)": {
        "details": "Register a name, without modifying the registry.",
        "params": {
          "duration": "Duration in seconds for the registration.",
          "id": "The token ID (keccak256 of the label).",
          "owner": "The address that should own the registration."
        }
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise, the transfer is reverted. Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "_data": "bytes data to send along with a safe transfer check",
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf",
        "params": {
          "approved": "representing the status of the approval to be set",
          "to": "operator address to set the approval"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of a given token ID to another address Usage of this method is discouraged, use `safeTransferFrom` whenever possible Requires the msg sender to be the owner, approved, or operator",
        "params": {
          "from": "current owner of the token",
          "to": "address to receive the ownership of the given token ID",
          "tokenId": "uint256 ID of the token to be transferred"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "renounceOwnership()": {
        "notice": "Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3116,
        "contract": "contracts/BaseRegistrarImplementation.sol:BaseRegistrarImplementation",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 3184,
        "contract": "contracts/BaseRegistrarImplementation.sol:BaseRegistrarImplementation",
        "label": "_tokenOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3188,
        "contract": "contracts/BaseRegistrarImplementation.sol:BaseRegistrarImplementation",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3192,
        "contract": "contracts/BaseRegistrarImplementation.sol:BaseRegistrarImplementation",
        "label": "_ownedTokensCount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3198,
        "contract": "contracts/BaseRegistrarImplementation.sol:BaseRegistrarImplementation",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2418,
        "contract": "contracts/BaseRegistrarImplementation.sol:BaseRegistrarImplementation",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 43,
        "contract": "contracts/BaseRegistrarImplementation.sol:BaseRegistrarImplementation",
        "label": "ens",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ENS)703"
      },
      {
        "astId": 45,
        "contract": "contracts/BaseRegistrarImplementation.sol:BaseRegistrarImplementation",
        "label": "baseNode",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 49,
        "contract": "contracts/BaseRegistrarImplementation.sol:BaseRegistrarImplementation",
        "label": "controllers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 118,
        "contract": "contracts/BaseRegistrarImplementation.sol:BaseRegistrarImplementation",
        "label": "expiries",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_contract(ENS)703": {
        "encoding": "inplace",
        "label": "contract ENS",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}